load("algebra/scalar_field.sage")
load("algebra/polynomial.sage")

class Vector:

    def __init__(self, v: sage.modules.vector_integer_dense.Vector_integer_dense, H: Group):

        self.to_vector = vector(v)
        self.H = H

        if len(v) > self.H.order:
            print('Error: Unable to index as the order of H is less than len(v).')
            assert(0)

        # self.norm = self.to_vector.norm() #L2 norm
        self.len = len(self.to_vector)
        self.low_degree_extension = self.low_degree_extension()


    # Returns the indexing group H generated by an element which is of order
    # at least the minimal power of 2 which is at least len(v).
    def index_group(self):
        n = len(self.to_vector)
        if n > Fstar.order():
            print('Error: Length of vector is greater than |F*|.')
            assert(0)
        c = ceil(log(n, 2).n())
        P = get_root_of_unity(Fstar, c)
        while P == None and c <= prime_factors[0][1]:
            c+=1
            P = get_root_of_unity(Fstar, c)
        if c > prime_factors[0][1]:
            print('Error: 2^c is not a factor of |F*|.')
            assert(0)
        H = Fstar.subgroup([P])
        return H


        # Returns the low degree extension polynomial of vector v.
    # This is done by returning the Lagrange interpolation of the points (h^i, v[i]) for 0 <= i < len(v).
    def low_degree_extension(self):
        points = []
        for i, h in enumerate(self.H.to_list):
            if i < len(self.to_vector):
                points.append((F(h), F(self.to_vector[i])))
        f = R.lagrange_polynomial(points)
        return f

# Returns a vector w that is v after zero-padding to length n.
def zero_pad_vector(v, n):
    assert(v != None)
    if n < len(v):
        print('Error: v cannot be zero-padded to length n.')
        assert(0)
    w = zero_vector(n)
    for i in range(len(v)):
        w[i] = v[i]
    return w